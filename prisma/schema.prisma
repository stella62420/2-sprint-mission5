<<<<<<< HEAD
=======
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


>>>>>>> upstream/김슬비
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickname     String   @unique
  image        String?
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())

=======

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  nickname        String           @unique
  image           String?
  password        String
  refreshToken    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
>>>>>>> upstream/김슬비
  Articles        Article[]        @relation("UserArticles")
  Products        Product[]
  Comments        Comment[]        @relation("UserComments")
  ProductComments ProductComment[]
  LikedProducts   ProductLike[]
  LikedArticles   ArticleLike[]    @relation("UserLikes")
}

model Article {
<<<<<<< HEAD
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

=======
  id       Int           @id @default(autoincrement())
  title    String
  content  String
  userId   Int
>>>>>>> upstream/김슬비
  user     User          @relation("UserArticles", fields: [userId], references: [id])
  comments Comment[]
  Likes    ArticleLike[]
}

model Product {
<<<<<<< HEAD
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  category    String?
  images      String[]
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  seller          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductComments ProductComment[]
  Likes           ProductLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  articleId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  user    User    @relation("UserComments", fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])
=======
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  price           Int
  category        String?
  images          String[]
  userId          Int 
  seller          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductComments ProductComment[]
  Likes           ProductLike[] 
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String
  articleId Int
  userId    Int
  user      User    @relation("UserComments", fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([productId, userId])
>>>>>>> upstream/김슬비
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  productId Int
  userId    Int
  createdAt DateTime @default(now())
<<<<<<< HEAD
  updatedAt DateTime @updatedAt @default(now())
=======
  updatedAt DateTime @updatedAt
>>>>>>> upstream/김슬비

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

<<<<<<< HEAD
model ProductLike {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

=======
>>>>>>> upstream/김슬비
model ArticleLike {
  articleId Int
  userId    Int

  Article Article @relation(fields: [articleId], references: [id])
  User    User    @relation("UserLikes", fields: [userId], references: [id])

  @@id([articleId, userId])
}
<<<<<<< HEAD
=======

>>>>>>> upstream/김슬비
